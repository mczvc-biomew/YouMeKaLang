try {
  var x = 1 / 0;
  print x;
  throw "division by zero!";
} catch (e) {
  print "Caught error: " + e;
}


var list = java.util.ArrayList();
list.add("Hello Matt");
puts list.get(0) + " ";

print Math.pow(15, 1) * 2;

puts "Full name:\n";
var {name, middle = "Corrales", last} = { name: "Luqas Matt", last: "Noces" };

type RobloxPlayer = {
    name: string,
    age: number
};

type RagnarokPlayer = {
    name: string,
    level: number
};

var luqas: RobloxPlayer = {
    name: `${name} ${middle} ${last}`,
    age: 8
};

fun greetRP(u: RobloxUser) {
    print `Hello, ${u.name}!` + '\n' + `You are now ${u.age} years old`;
}

fun greetMU(u: RagnarokPlayer) {
    print `Hello luqas-matt`;
}

greetRP(luqas);
try {
    greetMU(luqas);
} catch (e) {
    print "Not a Ragnarok user!";
    print "But a Minecraft and Roblox player ;)";
    print e;
}

print "";

import modules.helloWorld as hw;

print "Start";
setTimeout(|| { print "Hi after 1s"; }, 1000);
var id = setInterval(|count| { print `tick${"." * (4 - count)}`; }, 500);

setTimeout(|| clearTimeout(id), 2000);

print "H-i and H-e-l-l-o";
print hw.hello()["world"];
print "Does capture local variable";
var greetings = hw.hello()["greetings"];
print " -- Hi!";
puts `${greetings} says: `;
// print env();
print greetings();
print env();
print "";

print hw.hello()["greetings2"]() + ".";
print hw.hello()["greetings3"]();
print `: (hw.hello) is: ${typeof(hw.hello)} that returns ${typeof(hw.hello())}`;
print hw.hello();
print "";


var obj = {name: "YouMeKa", version: 1.0};
if ("name" in obj) print obj.name;

var nums = [1, 2, 3];
if (2 in nums) print `2 is in list: ${nums}`;

if ("Me" in "YouMeKa") print "Me found in 'YouMeKa'";
print "";


// lambda
var add = |a:number, b:number| a+b;
var triple = |x: number| x*3;
var always = ||: number 42;
var HelloWorld = ||: string { return "Hello" + " || " + "World!"; };

puts "1 add 2 is ";
print add(1,2);
var l1 = triple(3);
case l1 {
    when 9 => print "number 3 tripled is 9";
    else => print l1;
}
var l2 = triple(4);
case l2 {
    when 12 => print "number 4 tripled is 12";
    else => print l2;
}
var solution = always();
case solution {
    when 42 => puts "42 is the solution to ";
    else => print "no solution at all!";
}

var solution = case solution {
    when 42 => "life";
    else => "none";
};

print solution;

print HelloWorld();
print "";


print "# Functions";

fun caller(g: function) {
  g();
  // g should be a function, not null.
  print g == null; // expect: false
}

fun callCaller() {
  var capturedVar = "before";
  var a = "a";

  print capturedVar;

  fun f() {
    capturedVar = "after";

    print capturedVar;
  }

  caller(f);
}

callCaller();
print "fun () { return 42; }";
print (fun () { return 42; })();

fun memoize(fn) {
    var cache = {};
    return |x| {
        if (x in cache) return cache[x];
        var result = fn(x);
        cache[x] = result;
        return result;
    };
}

@memoize
fun fib(n) {
    if (n < 2) return n;
    return fib(n - 1) + fib(n - 2);
}

puts "fibonacci(30) is ";
print fib(30);

print "";

var newStrs = new string[50];
for (var i = 0; i < 50; i++ ) {
    newStrs[i] = "Hello World";
}
print ["hello"];
puts str(["[Hello World]"]) + "x";
print length(newStrs);
print "";


print "# Postfix & Prefix";
var i = 0;
print i;
print --i;
print ++i;
print i--;
print i++;
print i;
var j = i + 42;
print j;
print "";


print "# Compound assignment";
var j = 0;
puts str(j) + ", ";
j += 1;
puts str(j) + ", ";
j -= 1;
print str(j);
print "";


print "# Spread";
fun swimmer() {
    return {
        swim: |fish| { print fish; }
    };
}

fun swimmingFish() {
    var obj = { name: "fish" };
    print obj;
//    puts "SwimmingFish::ENV: ";
//    print env();
    return { ...obj,
        _x: 42,
        get x() {
            return this._x;
        },
        set x(val) {
            this._x = val - 58;
        },
        ...swimmer() };
}
print "Swimming fish says: ";
swimmingFish().swim("Splash!");
var l = [1, 2];
var m = [...l, 3];
var n = [0, ...m, ...[4, 5, 6]];
print n;
print env();
var obj = swimmingFish();
print obj.x;
obj.x = 100; // expects 42 (!!)
print obj.x;
print "";


print "# Types";
print typeof(i);
print typeof(|| "");
print typeof([]);
print typeof({});
print typeof(true == false);
print typeof([]) == typeof(new string[0]);
print "";


print "# Class";
class c {
    foo() {
        print "c::foo()";
    }
}
class d < c {
    init() {
        print "Initializing: d";
    }
    foo() {
        print "foo";
    }
}
var newC = c();
print typeof(newC);
newC.foo();
d().foo();

print typeof(newStrs) + "[" + str(length(newStrs)) + "]";
// print true.__class__;

class Vector {
    init(x, y) {
        this.x = x;
        this.y = y;
    }

    __add__(other) {
        return Vector(this.x + other.x, this.y + other.y);
    }
    __eq__(other) {
        return this.x == other.x and this.y == other.y;
    }
}

var v1 = Vector(1, 2);
var v2 = Vector(3, 4);

print `${str(v1)} + ${str(v2)}`;
print v1 + v2;
print "";


print "# Pattern matching";
var value = [1, 2];
var value2 = {_type: "Point", x: 3, y: 4};

var result = match value {
  when [1, x] => "head 1, tail " + x;
  when {_type: "Point", x, y} => x + y + 1;
  when 42 => "The Answer";
  else => "Unknown";
};
print result;
print "";


print "# Null Coalescing";
var user = { name: "Meldencio" };
print user?.name ?? "Guest";

var nothing = null;
print nothing?.name ?? "Guest";

print "";


print "# Comparison";
var noReturn = || {};
print "var noReturn = || {};";
print "noReturn() == undefined:";
print noReturn() == undefined;
print "[] == {}";
print [] == {};
print "[] == []";
print [] == [];
var test = [];
print ["test"];
print test;
print "print noReturn;";
print str(noReturn) + " == " + str("noReturn" == "noReturn");
(noReturn = false) or (noReturn = true);
print `noReturn = ${noReturn}`;

print !true == not true;
